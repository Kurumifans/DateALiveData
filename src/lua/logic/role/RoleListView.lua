---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/7/25 0025 19:59
---
local RoleListView = class("RoleListView", BaseLayer)
require "lua.public.ScrollMenu"

function RoleListView:initData()
    self.useId = RoleDataMgr:getUseId()
    self.model = nil
end

function RoleListView:ctor()
    self.super.ctor(self)

    self:initData()

    self:init("lua.uiconfig.role.roleListView")
end

function RoleListView:initUI(ui)
    self.super.initUI(self,ui)

    self.ui = ui

    self.Panel_base = TFDirector:getChildByPath(self.ui, "Panel_base")
    self.Panel_roleList = TFDirector:getChildByPath(self.ui, "Panel_roleList")
    self.Image_roleInfoBg = TFDirector:getChildByPath(self.ui, "Image_roleInfoBg")

    self.Panel_item =TFDirector:getChildByPath(self.ui, "Panel_item")
    self.Panel_item_up =TFDirector:getChildByPath(self.ui, "Panel_item_up")
    self.Panel_item_down =TFDirector:getChildByPath(self.ui, "Panel_item_down")

    self:initRoleInfo()
    self:initTableView()

    self:updateRoleModel()
    self:updateRoleInfo()

    self:enterAction()
end

function RoleListView:enterAction()
    local disX = 1000
    self.Panel_roleList:PosX(self.Panel_roleList:PosX() - disX)
    self.Panel_roleList:moveBy(0.3,disX,0)
    self.Image_roleInfoBg:PosX(self.Image_roleInfoBg:PosX() + disX)
    self.Image_roleInfoBg:moveBy(0.3,-disX,0)
end

function RoleListView:updateRoleModel(roleId)
    roleId = roleId or self.useId
    if self.modelId and self.modelId == RoleDataMgr:getModel(roleId) then
        return
    end
    if self.model then
        self.model:removeFromParent()
    end
    self.modelId = RoleDataMgr:getModel(roleId)
    if self.voiceHandle then
        TFAudio.stopEffect(self.voiceHandle)
    end
    self.voiceHandle = VoiceDataMgr:playVoice("change_kanban",roleId)
    self.model = ElvesNpcTable:createLive2dNpcID(self.modelId,true).live2d:hide()
    self.Panel_base:addChild(self.model,100)
    self.model:setScale(0.7); --缩放
    local pos = ccp(self.Panel_base:Size().width/2 - 50,-100)
    self.model:Pos(pos)

    self.model:show()
    self.model:setZOrder(-1)
    self.ui:timeOut(function()
        self.model:setZOrder(1)
        self.model:playIn(0.3)
    end,0)
end

function RoleListView:initRoleInfo()
    self.Button_change = TFDirector:getChildByPath(self.Image_roleInfoBg, "Button_change")
end

function RoleListView:updateRoleInfo(roleId)
    local useId = roleId or self.useId
    local Label_desc = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_desc")
    Label_desc:setString(RoleDataMgr:getDesc(useId))

    local useRoleInfo = RoleDataMgr:getRoleInfo(useId)
    --身高
    local Label_height = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_height")
    Label_height:setString(useRoleInfo.height)
    --三维
    local Label_threeDimensional = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_threeDimensional")
    Label_threeDimensional:setTextById(useRoleInfo.threeDimensional)
    --名字
    local Label_name = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_name")
    Label_name:setTextById(useRoleInfo.nameId)
    --声优
    local Label_theme = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_theme")
    Label_theme:setString(TextDataMgr:getText(useRoleInfo.akiraId))
    --生日
    local Label_birthday = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_birthday")
    Label_birthday:setTextById(useRoleInfo.birthday)
    --体重
    local Label_weight = TFDirector:getChildByPath(self.Image_roleInfoBg,"Label_weight")
    Label_weight:setTextById(useRoleInfo.weight)
end

function RoleListView:initTableView()
    local params = {
        ["upItem"]                  = self.Panel_item_up,
        ["downItem"]                = self.Panel_item_down,
        ["selItem"]                 = self.Panel_item,
        ["offsetX"]                 = 15,
        ["updateCellInfo"]          = handler(self.updateCellInfo,self),
        ["selCallback"]             = handler(self.selCallback,self),
        ["cellCount"]               = RoleDataMgr:getRoleCount(),
        ["isLoop"]                  = false,
        ["size"]                    = self.Panel_roleList:Size();
    }
    local scrollMenu = ScrollMenu:create(params);
    self.Panel_roleList:addChild(scrollMenu,10)
    local jumpTo = RoleDataMgr:getRoleIdx(self.useId)
    scrollMenu:jumpTo(jumpTo);
    self.scrollMenu = scrollMenu
end

function RoleListView:updateCellInfo(cell,cellIdx)
    local roleId = RoleDataMgr:getRoleIdByShowIdx(cellIdx);
    local ishave = RoleDataMgr:getIsHave(roleId)
    if ishave then
        cell:setColor(me.c3b(0xFF,0xFF,0xFF))
    else
        cell:setColor(me.c3b(0x80,0x80,0x80))
    end
    local Label_name = TFDirector:getChildByPath(cell,"Label_name");
    local Image_head = TFDirector:getChildByPath(cell,"Image_head");

    Image_head:setTexture(RoleDataMgr:getHeadIconPath(roleId))
    Label_name:setString(RoleDataMgr:getName(roleId));
    local Panel_lock = TFDirector:getChildByPath(cell,"Panel_lock")
    local Panel_unLock = TFDirector:getChildByPath(cell,"Panel_unLock")
    Panel_unLock:setVisible(ishave)
    Panel_lock:setVisible(not ishave)
    local Image_use = TFDirector:getChildByPath(cell,"Image_use")
    Image_use:setVisible(roleId == RoleDataMgr:getUseId())

    local favorLv = RoleDataMgr:getFavorLevel(roleId)
    local Label_favorLevel = TFDirector:getChildByPath(cell,"Label_favorLevel")
    Label_favorLevel:setText("Lv." .. favorLv)
end

function RoleListView:selCallback(cell,cellIdx)
    local roleId = RoleDataMgr:getRoleIdByShowIdx(cellIdx);
    local ishave = RoleDataMgr:getIsHave(roleId)
    cell:setColor(me.c3b(0xFF,0xFF,0xFF))
    cell:setGrayEnabled(not ishave)

    self:selectOne(roleId,cellIdx)
end

function RoleListView:selectOne(roleId,cellIdx)
    local ishave = RoleDataMgr:getIsHave(roleId)
    self.Button_change:setGrayEnabled((roleId == self.useId) or not ishave)
    self.Button_change:setTouchEnabled((roleId ~= self.useId) or ishave)
    self.Button_change.cellIdx = cellIdx

    self:changeShowOne(roleId);
end

function RoleListView:changeShowOne(roleId)
    self:updateRoleInfo(roleId)
    self:updateRoleModel(roleId)
end

function RoleListView:onRefreshRoleModel()
    self.useId = RoleDataMgr:getUseId()
    self.modelId = RoleDataMgr:getModel(self.useId)

    --self:changeShowOne();
    self.scrollMenu:removeFromParent()
    self.scrollMenu = nil
    self:initTableView()
end

function RoleListView:switchRole(idx)
    local id = RoleDataMgr:getRoleIdByShowIdx(idx);
    if id ~= RoleDataMgr:getUseId() then
        RoleDataMgr:switchRole(id);
    end
end

function RoleListView:onShow()
    self.super.onShow(self)
end

function RoleListView:onClose()
    self.super.onClose(self)

    if self.voiceHandle then
        TFAudio.stopEffect(self.voiceHandle)
    end
end

function RoleListView:registerEvents()
    EventMgr:addEventListener(self, EV_DATING_EVENT.refreshRoleModel, handler(self.onRefreshRoleModel, self))

    self.Button_change:onClick(function()
        if self.Button_change.cellIdx then
            self:switchRole(self.Button_change.cellIdx)
            local roleId = RoleDataMgr:getRoleIdByShowIdx(self.Button_change.cellIdx)
            local ishave = RoleDataMgr:getIsHave(roleId)
            self.Button_change:setGrayEnabled((roleId == self.useId) or not ishave)
        end
    end)
end

return RoleListView